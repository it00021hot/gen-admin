// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// GenDatabaseDao is the data access object for table gen_database.
type GenDatabaseDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns GenDatabaseColumns // columns contains all the column names of Table for convenient usage.
}

// GenDatabaseColumns defines and stores column names for table gen_database.
type GenDatabaseColumns struct {
	Id         string // 编号
	Group      string // 分组名称
	Host       string // 地址
	Port       string // 端口
	User       string // 账号
	Pass       string // 密码
	Name       string // 数据库名称
	Type       string // 数据库类型
	CreateBy   string // 创建者
	CreateTime string // 创建时间
	UpdateBy   string // 更新者
	UpdateTime string // 更新时间
	Remark     string // 备注
}

// genDatabaseColumns holds the columns for table gen_database.
var genDatabaseColumns = GenDatabaseColumns{
	Id:         "id",
	Group:      "group",
	Host:       "host",
	Port:       "port",
	User:       "user",
	Pass:       "pass",
	Name:       "name",
	Type:       "type",
	CreateBy:   "create_by",
	CreateTime: "create_time",
	UpdateBy:   "update_by",
	UpdateTime: "update_time",
	Remark:     "remark",
}

// NewGenDatabaseDao creates and returns a new DAO object for table data access.
func NewGenDatabaseDao() *GenDatabaseDao {
	return &GenDatabaseDao{
		group:   "default",
		table:   "gen_database",
		columns: genDatabaseColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *GenDatabaseDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *GenDatabaseDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *GenDatabaseDao) Columns() GenDatabaseColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *GenDatabaseDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *GenDatabaseDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *GenDatabaseDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
